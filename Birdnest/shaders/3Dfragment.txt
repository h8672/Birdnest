#version 330 core

//in vec3 FragPos; //same as ourOffset
//in vec3 Normal;

in vec3 ourColor;
in vec3 ourOffset;
in vec2 TexCoord;

out vec4 color;

struct Material{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 position;
	//Light
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 viewPos;		//Jaa
uniform Material material;	//Joo
uniform Light light;		//Umm

uniform sampler2D ourTexture;
uniform vec4 textColor;
uniform vec4 textBGColor;

void main()
{
	//Actually ourColor may contain normal...
    vec3 Normal = ourColor;
	//color = vec4(ourColor, 1.0f);
	vec4 texture1 = texture(ourTexture, TexCoord);
	//color = texture1 * vec4(ourColor, 1.0f);//värin lisäys tekstuuriin...
	//color = texture1;
	
	//There maybe some internal commands to delay reading again some information
	//Something was weird, it took a long time until it got fixed, not sure what I did
	//But now I can watch my beutiful text that will be drawn :)


	//Set inside font.cpp color vectors to 0.011f, Doesn't work with NVIDIA cards...
	if(ourColor == vec3(0.011f)){
		vec4 sampled = vec4(1.0f, 1.0f, 1.0f, texture1.r);
		//Text
		if(texture1.r <= 0.5f){
			color = vec4(textColor);// / sampled;
		}
		//Text border
		else if(texture1.r > 0.5f && texture1.r < 1.0f){
			color = vec4(textBGColor);// * sampled * vec4(0.0f, 0.0f, 0.0f, 1.0f);
		}
		//Text background
		else color = vec4(textBGColor);// * sampled;
		
	}
	else {
		//color = vec4(Normal, 1.0f);
		color = texture1;
	}

	/*
	//Light settings
		// Ambient
		vec3 ambient = light.color * material.ambient;
  	
		// Diffuse
		vec3 norm = normalize(Normal);
		vec3 lightDir = normalize(light.position - FragPos);
		float diff = max(dot(norm, lightDir), 0.0f);
		vec3 diffuse = light.color * (diff * material.diffuse);
    
		// Specular
		vec3 viewDir = normalize(viewPos - ourOffset);
		vec3 reflectDir = reflect(-lightDir, norm);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
		vec3 specular = light.color * (spec * material.specular);
        
		vec3 result = ambient + diffuse + specular;
		vec4 lightcolor = vec4(result, 1.0f);
		
		color = color * lightcolor;
	//Done light settings
	*/

	//When sould I add texels to smooth my text borders...? ;D
	


}
